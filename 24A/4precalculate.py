import numpy as np

def generate_precomputed_constants():
    """
    根据问题描述中的基本参数，计算并返回所有在主程序中需要用到的常量。
    """
    
    # --------------------------------------------------------------------------
    # 1. 基本输入参数 (从问题描述中直接获取)
    # --------------------------------------------------------------------------
    d = 1.7  # 螺线螺距 (m)
    D = 9.0  # 调头空间直径 (m)
    v0 = 1.0 # 龙头恒定速度 (m/s)

    # --------------------------------------------------------------------------
    # 2. 核心几何参数计算
    # --------------------------------------------------------------------------
    
    # 调头空间的半径
    R_space = D / 2.0
    
    # 螺线方程常数 a，其中 𝜌 = a * 𝜃
    a = d / (2 * np.pi)
    
    # 龙头在0时刻（调头开始点 P_in）的极角 theta0
    # 此时，龙头位于调头空间边界上，其极径 𝜌_in = R_space
    # R_space = a * theta0  =>  theta0 = R_space / a
    theta0 = R_space / a

    # S形曲线的半径 (r, r1) 和圆心角 (aleph)
    # 这三个值是通过求解复杂的几何约束方程（螺线与圆弧在P_in和P_out点相切，
    # 且两段圆弧彼此相切）得到的。
    r = 1.5027088      # 较小圆弧半径 r₂ (m)
    aleph = 3.0214868  # 圆心角 α (rad)
    
    # --------------------------------------------------------------------------
    # 3. 衍生参数计算 (由核心参数直接推算)
    # --------------------------------------------------------------------------
    
    # 较大大圆弧半径 r₁
    r1 = 2 * r
    
    # 龙头到达S形曲线中点P的时间 t1
    # 路程 = 大圆弧弧长 = r1 * aleph
    t1 = (r1 * aleph) / v0

    # 龙头完成调头到达 P_out 的时间 t2
    # 总路程 = 两段圆弧总长 = (r1 + r) * aleph
    t2 = ((r1 + r) * aleph) / v0
    
    # S形曲线两段圆弧的圆心坐标 (x1, y1) 和 (x2, y2)
    # 以及用于参数方程计算的起始角度 theta1_arc, theta2_arc
    # 这些值同样是几何求解的结果，与 theta0, r, aleph 相关。
    # 在您的代码中也是直接给出的已知数。
    x1 = -0.7600091
    y1 = -1.3057264
    x2 = 1.7359325
    y2 = 2.4484020
    theta1_arc = 4.0055376
    theta2_arc = 0.8639449

    # --------------------------------------------------------------------------
    # 4. 汇总所有常量到一个字典中，方便在主程序中使用
    # --------------------------------------------------------------------------
    constants = {
        'd': d, 'D': D, 'v0': v0,
        'theta0': theta0, 
        'r': r, 'r1': r1, 'aleph': aleph,
        't1': t1, 't2': t2,
        'x1': x1, 'y1': y1,
        'x2': x2, 'y2': y2,
        'theta1_arc': theta1_arc,
        'theta2_arc': theta2_arc
    }
    
    return constants

if __name__ == '__main__':
    # 执行计算并打印结果
    precomputed_values = generate_precomputed_constants()
    
    print("--- 预计算常量清单 ---")
    for key, value in precomputed_values.items():
        print(f"{key:<12}: {value}")

    
